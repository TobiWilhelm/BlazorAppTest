# This workflow will build a docker container, publish it to Google Container
# Registry, and deploy it to GKE when there is a push to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml,
#    kustomization.yml, service.yml, etc.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Change the values in the "env" block to match your values.

name: 'Build and Deploy to GKEv1'

on:
  workflow_dispatch:
  push:
    branches:
      'main'

env:
  PROJECT_ID: 'tobiproject-442513' # TODO: update to your Google Cloud project ID
  GAR_LOCATION: 'europe-west3' # TODO: update to your region
  GKE_CLUSTER: 'autopilot-cluster-99' # TODO: update to your cluster name
  GKE_ZONE: 'europe-central2' # TODO: update to your cluster zone
  DEPLOYMENT_NAME: 'blazor-deployment' # TODO: update to your deployment name
  REPOSITORY: 'samples' # TODO: update to your Artifact Registry docker repository name
  IMAGE: 'my-blazor-image'

jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}' # Replace with the name of your GitHub Actions secret

      - name: 'Login to GAR'
        uses: 'docker/login-action@v3'
        with:
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          username: _json_key
          password: '${{ secrets.GOOGLE_CREDENTIALS }}'

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2' # google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'
        
      - name: 'Test kubectl'
        run: |
          kubectl version
          kubectl get nodes
          kubectl get pods --all-namespaces

      # Build the Docker image
      - name: 'Build and push Docker container'
        run: |-
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"

          docker build \
            --tag "${DOCKER_TAG}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            .

          docker push "${DOCKER_TAG}"

      - name: 'Deploy to GKE'
        run: |-
          sed -i "s/PROJECT_ID/${PROJECT_ID}/g" resources.yaml
          sed -i "s/MY_TAG/${GITHUB_SHA}/g" resources.yaml
          kubectl apply -f resources.yaml
          kubectl rollout status deployment/${DEPLOYMENT_NAME}
          kubectl get pods -o wide
          kubectl get services -o wide
